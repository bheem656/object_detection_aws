"""
Run a rest API exposing the yolov5s object detection model
"""
import argparse
import io
import json
import torch
from flask import Flask, request, render_template
from PIL import Image
from change_origin import convert
# from werkzeug.utils import secure_filename
import os
import requests
from flask_cors import CORS, cross_origin
# from io import BytesIO



app = Flask(__name__)

# CORS(app, support_credentials=True)


DETECTION_URL = "/v1/object-detection/yolov5s"

def process(image_file):
        image_bytes = image_file.read()
        img = Image.open(io.BytesIO(image_bytes))
        height = img.height
        results = model(img)
        temp = results.pandas().xyxy[0].to_json(orient="records")
        res = convert(temp,height)
        # result_append(res)
        # result = eval(res)
        # result = json.dumps(res)

        return (res)

def process_url(im):
        img = Image.open(im)
        height = img.height
        print(height)
        results = model(img)
        temp = results.pandas().xyxy[0].to_json(orient="records")
        res = convert(temp,height)
        # result_append(res)
        # result = eval(res)
        # result = json.dumps(res)
        return (res)



# garuda_url = '/garuda_poc'
mylist = []
mydata = []
mysend = None
def extract_path(x1):
    for x in range(0,(len(x1)-1)):
        for y in range(len(x1[x]['images'])):
            i1 = (x1[x]['images'][y]['path'])
            mylist.append(i1)
    return mylist




@app.route(DETECTION_URL, methods=["GET", "POST"])
# @crossdomain(origin="*")
def starting_url():
    content_type = request.headers.get('Content-Type')
    if (content_type == 'application/json'):
        json = request.json
        mysend = json
        imag_data = extract_path(json)

    else:
        return 'Content-Type not supported!'

    for x in range(0,(len(imag_data)-1)):
        response = requests.get(imag_data[x])
        image_bytes = io.BytesIO(response.content)
        converted_data = process_url(image_bytes)
        mysend[0]['images'][x]['data'] = converted_data
        print(converted_data)
    payload = {'Detected_payload': mysend}
    # payload.headers.add('Access-Control-Allow-Origin', '*')
    return (payload)



if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Flask API exposing YOLOv5 model")
    parser.add_argument("--port", default=5000, type=int, help="port number")
    args = parser.parse_args()

    model = torch.hub.load("ultralytics/yolov5", "yolov5s", force_reload=True)  # force_reload to recache
    app.run(host="0.0.0.0", port=args.port, debug=True)  # debug=True causes Restarting with stat
